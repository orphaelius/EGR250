/*
Create a C structure, VACATION, that will allow the following data to be encapsulated:

    a vacation destination
    a vacation price per day - this represents a total price per day --- hotel, food, etc --- check the data file for data type
    a number of days for the vacation
    a total cost of the vacation
    a vacation destination distance from Reagan National Airport --- check the data file for data type
    a passport requirement  ---- this is an integer, 1 for yes, a passport is required, 0 for no, a passport is not required.

Create an array of 20 VACATION structures.

Read the data for the 20 structures from this file: vacations-1.txt

Download vacations-1.txt  .  
Write a function to read the and create the array of structures.   
All fields EXCEPT the total will be read from the file.  
The total cost will be calculated - 
may consider writing a function to calculate the total cost of the vacation.

Write one function for each of the following tasks:

            Display all vacations  ---- all data associated with a vacation --- your program should format this nicely in columns
            Display all destinations and distances only - again columns
            Display all vacation destinations within a range - your program will ask for an upper boundary representing the furthest that the user is willing to travel.

    Display all vacation costs within a range - your program will ask for an upper boundary representing the most that the user is willing to pay for vacation.

    Display all US destinations
    Display all destinations outside of the US
    Search for destination by portion of name --- your program will request a portion of a name, something like this:

    Enter a portion of the destination:  os
    The vacation destinations that contain os are:
    Boston, Massachusettes
    Los Angeles, California, US


*/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define MAXCHAR 100
#define TOTALVAC 20

typedef struct {
    char destination[MAXCHAR];
    int pricePerDay; // turn to int?
    int vacationDays;
    float totalCost; // must be calculated-- not in data file
    float distanceFromReagan;
    int passport;
} VACATION;

void readDataFile(VACATION allVacations[]);
void calculateTotalCost(VACATION allVacations[]);
void displayAllVacationData(VACATION allVacations[]);
void displayDestandDist(VACATION allVacations[]);
void distanceSearch(VACATION allVacations[]);
void costSearch(VACATION allVacations[]);
void searchDest();
void clearInputBuffer(void);
void headerLines(void);
void displayHeader(void);

int main(void) {
    VACATION allVacations[TOTALVAC];
    displayHeader();

    readDataFile(allVacations); 
    calculateTotalCost(allVacations);

    displayAllVacationData(allVacations);
    displayDestandDist(allVacations);

    distanceSearch(allVacations);
    costSearch(allVacations);

    return 0;
}

void readDataFile(VACATION allVacations[]) {
    FILE* infile = fopen("vacations-1.txt", "r");
    char endOfLine[10];

    for (size_t i = 0; i < TOTALVAC; ++i) {

        // Grab destination
        fgets(allVacations[i].destination, MAXCHAR, infile);
        allVacations[i].destination[strlen(allVacations[i].destination) - 1] = '\0';

        // Grab price per day
        fscanf(infile, "%d", &allVacations[i].pricePerDay);
       
         // Grab total vacation days
        fscanf(infile, "%d", &allVacations[i].vacationDays);
       
        // Grab distance from Reagan Airport
        fscanf(infile, "%f", &allVacations[i].distanceFromReagan);
       
        // Grab whether trip requires passport
        fscanf(infile, "%d", &allVacations[i].passport);        
        
        // Clear buffer before next fgets() iteration 
        fgets(endOfLine, 10, infile);    
    }

    fclose(infile);

} // End readDataFile()

void calculateTotalCost(VACATION allVacations[]) {
    for (size_t i = 0; i < TOTALVAC; ++i) {
        allVacations[i].totalCost = allVacations[i].pricePerDay * allVacations[i].vacationDays;
    }
} // End calculateTotalCost()

// ADD DOLLARS, MILES, ETC 

void displayAllVacationData(VACATION allVacations[]) {
    printf("Displaying full data set...\n");
    headerLines();
    printf("%30s%20s%20s%20s%20s%20s\n", 
        "Destination", "Price Per Day", "Vacation Days", "Total Cost", 
        "Distance From Reagan", "Passport Required");
    headerLines();
    for (size_t i = 0; i < TOTALVAC; ++i) {
        printf("%30s", allVacations[i].destination);
        printf("%20d", allVacations[i].pricePerDay);
        printf("%20d", allVacations[i].vacationDays);
        printf("%20.2f", allVacations[i].totalCost);
        printf("%20.2f", allVacations[i].distanceFromReagan);
        if (allVacations[i].passport == 1) {
            printf("%20s", "Yes");
        }
        else {
            printf("%20s", "No");
        }       
        puts("");
    }
} // End displayAllVacationData()

void displayDestandDist(VACATION allVacations[]) {
    headerLines();
    printf("Displaying only destinations and their respective distances from Reagan...\n");
    headerLines();
    printf("%30s%30s\n",
        "Destination", "Distance From Reagan");
    headerLines();
    for (size_t i = 0; i < TOTALVAC; ++i) {
        printf("%30s", allVacations[i].destination);        
        printf("%30.2f", allVacations[i].distanceFromReagan);        
        puts("");
    }
} // End displayDestandDist()

void distanceSearch(VACATION allVacations[]) {
    puts("");
    headerLines(); 
    float maxDistance = 0.0;
    printf("Enter the maximum distance you are willing to travel from Reagan: ");
    scanf("%f", &maxDistance);

    for (size_t i = 0; i < TOTALVAC; ++i) {
        if ((int)(allVacations[i].distanceFromReagan * 1000) <= (int)(maxDistance * 1000)) {
            printf("%s is within %.2f miles of Reagan.\n", allVacations[i].destination, maxDistance);
        }
    }

} // End distanceSearch()

void costSearch(VACATION allVacations[]) {
    puts("");
    headerLines(); 
    float maxSpend = 0.0;
    printf("Enter the most you are willin to spend on a vacation (in USD): ");
    scanf("%f", &maxSpend);
    for (size_t i = 0; i < TOTALVAC; ++i) {
        if ((int)(allVacations[i].totalCost * 1000) <= (int)(maxSpend * 1000)) {
            printf("%s is within your spend range of $%.2f.\n", allVacations[i].destination, maxSpend);
        }
    }

}

void displayHeader() {
    headerLines();
    printf("%s %s %s",  
        "---------------------------------------------------------------",
        "VACATION DATA", 
        "--------------------------------------------------------------\n");
    headerLines();
} // End displayHeader()

void headerLines() {
    for (size_t i = 0; i < 140; ++i) {
        printf("%c", '-');
    }
    puts("");
} // End headerLines()


/*
FUNCTIONS

read
- read in data from data file
    - vacations-1.txt

calculate total cost
- price per day * vacation days = total cost

display all vacations
- tabular, etc

display destinations and their distances only

Display all vacation destinations within a range - 
your program will ask for an upper boundary representing the furthest that the user is willing to travel.
    
Display all vacation costs within a range - 
your program will ask for an upper boundary representing the most that the user is willing to pay for vacation.
    
Display all US destinations
    
Display all destinations outside of the US
    
Search for destination by portion of name --- your program will request a portion of a name, 
something like this:

- Enter a portion of the destination:  os
    The vacation destinations that contain os are:
    Boston, Massachusettes





*/
